{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.iterator.constructor.js\");\nrequire(\"core-js/modules/es.iterator.find.js\");\nrequire(\"core-js/modules/es.iterator.reduce.js\");\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n;\nfunction Rests(endpoints, options) {\n  const fetch = typeof window !== 'undefined' ? window === null || window === void 0 ? void 0 : window.fetch : require(\"node-fetch\"),\n    FormData = typeof window !== 'undefined' ? window === null || window === void 0 ? void 0 : window.FormData : require(\"form-data\");\n  if (!fetch) {\n    throw new Error(\"Fetch API is not installed. If you are using Node please run `npm install node-fetch`\");\n  }\n  if (!FormData) {\n    throw new Error(\"FormData is not installed. If you are using Node please run `npm install form-data`\");\n  }\n  const copyOptions = o => Object.assign(Object.assign({}, o), {\n    headers: Object.assign({}, o.headers),\n    params: Object.assign({}, o.params),\n    values: Object.assign({}, o.values)\n  });\n  const parseSet = values => {\n    var _a, _b;\n    if (((_b = (_a = values === null || values === void 0 ? void 0 : values.__proto__) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name) != \"Object\") {\n      throw new Error(\"Invalid $options object.\");\n    }\n    let saveOptions = copyOptions(values.$options || {});\n    delete values['$options'];\n    return Object.assign(Object.assign({}, saveOptions), {\n      values: Object.assign(Object.assign({}, saveOptions.values), values)\n    });\n  };\n  const mergeOptions = (prevOptions, currentOptions, mutate = false //Mutate the previous options?\n  ) => {\n    let firstOptions = mutate ? prevOptions || {} : copyOptions(prevOptions || {});\n    let secondOptions = copyOptions(currentOptions || {});\n    secondOptions.headers = Object.assign(Object.assign({}, firstOptions.headers), secondOptions.headers);\n    secondOptions.params = Object.assign(Object.assign({}, firstOptions.params), secondOptions.params);\n    secondOptions.values = Object.assign(Object.assign({}, firstOptions.values), secondOptions.values);\n    Object.assign(firstOptions, secondOptions);\n    return firstOptions;\n  };\n  endpoints = Object.assign({}, endpoints);\n  let global_options = {\n    base: \"\",\n    headers: {\n      'User-Agent': 'Rests JS (v1.1.1)'\n    },\n    params: {},\n    values: {},\n    on_error: void 0,\n    on_success: void 0,\n    on_request: void 0,\n    fetch_agent: null\n  };\n  mergeOptions(global_options, (endpoints === null || endpoints === void 0 ? void 0 : endpoints.$options) || {}, true);\n  mergeOptions(global_options, options, true);\n  const def_param_enctypes = {\n      \"json\": \"application/json\",\n      \"form\": \"multipart/form-data\",\n      \"urlencoded\": \"application/x-www-form-urlencoded\",\n      \"text\": \"text/plain\"\n    },\n    allowed_param_enctypes = Object.values(def_param_enctypes),\n    allowed_param_locations = [\"headers\", \"body\", \"query\", \"path\"],\n    def_param_locations = {\n      'POST': 'body',\n      'GET': 'query'\n    };\n  const serializers = {\n    'multipart/form-data': function () {\n      var formData = new FormData();\n      formData.toString = function () {\n        return this;\n      };\n      return formData;\n    },\n    'application/x-www-form-urlencoded': function () {\n      return new URLSearchParams();\n    },\n    'application/json': function () {\n      return {\n        append: function (key, value) {\n          this.data = this.data || {};\n          this.data[key] = value;\n        },\n        toString: function () {\n          return JSON.stringify(this.data);\n        },\n        isEmpty: function () {\n          return !this.data || Object.keys(this.data).length == 0;\n        }\n      };\n    },\n    'text/plain': function () {\n      return {\n        append: function (_, value) {\n          this.data = this.data || [];\n          return this.data.push(value);\n        },\n        toString: function () {\n          return this.data.join('');\n        },\n        isEmpty: function () {\n          return !this.data || this.data.length == 0;\n        }\n      };\n    }\n  };\n  const isNull = value => {\n    return value === null || value === undefined;\n  };\n  const isEmptyIterable = iterable => {\n    for (var _ of iterable) {\n      return false;\n    }\n    return true;\n  };\n  const escapeRegExp = string => {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n  };\n  const capitalize = string => {\n    return string.substr(0, 1).toUpperCase() + string.substr(1, string.length);\n  };\n  const formToJson = f => {\n    return Object.fromEntries(Array.from(f.keys(), k => k.endsWith('[]') ? [k.slice(0, -2), f.getAll(k)] : [k, f.get(k)]));\n  };\n  const get = (t, path) => path.split(\".\").reduce((r, k) => r === null || r === void 0 ? void 0 : r[k], t);\n  const getOne = (...args) => {\n    for (var i = 0; i < args.length; i++) {\n      if (args[i] !== null && args[i] !== undefined) {\n        return args[i];\n      }\n    }\n    return null;\n  };\n  /**\r\n   * Fetch API\r\n   */\n  const sendRequest = (url, options, currentOptions, requestInfo) => __awaiter(this, void 0, void 0, function* () {\n    return fetch(url, options).then(function (res) {\n      var _a;\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          var contentType = res.headers.get('Content-Type') || '';\n          let corsType;\n          try {\n            corsType = res.type;\n          } catch (err) {\n            //prevent errors on cloudflare workers \n          }\n          let formattedResponse = {\n            statusCode: res.status,\n            statusText: res.statusText,\n            headers: res.headers,\n            type: corsType,\n            ok: res.ok\n          };\n          let responseTypes = {\n            'application\\/json': 'json',\n            'text\\/plain': 'text',\n            '(multipart\\/form\\-data|application\\/x\\-www\\-form\\-urlencoded)': 'formData',\n            'blob': 'blob',\n            'text': 'text'\n          };\n          let currentResponseType = Object.keys(responseTypes).find(responseType => new RegExp(responseType).test(contentType)) || \"text\";\n          formattedResponse[responseTypes[currentResponseType]] = yield res[responseTypes[currentResponseType]]();\n          formattedResponse['message'] = ((_a = formattedResponse === null || formattedResponse === void 0 ? void 0 : formattedResponse.json) === null || _a === void 0 ? void 0 : _a.message) || (res.ok ? \"Success.\" : \"Something went wrong.\");\n          if (!res.ok) {\n            throw formattedResponse;\n          }\n          if (currentOptions.on_success) {\n            let successCallbackRes = currentOptions.on_success(formattedResponse, requestInfo);\n            if (successCallbackRes !== undefined) {\n              return successCallbackRes;\n            }\n          }\n          return formattedResponse;\n        } catch (err) {\n          if (currentOptions.on_error) {\n            let errorCallbackRes = currentOptions.on_error(err, requestInfo);\n            if (errorCallbackRes !== undefined) {\n              return errorCallbackRes;\n            }\n          }\n          return Promise.reject(err);\n        }\n      });\n    });\n  });\n  /**\r\n   * Request Wrapper\r\n   */\n  function wrap(endpoint, categoryOptions, categoryKey) {\n    endpoint.method = (endpoint.method || \"get\").toUpperCase(), endpoint.params = endpoint.params || {};\n    const sender = function (params) {\n      var _a, _b, _c, _d, _e, _f;\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this instanceof sender) {\n          throw new Error(\"This is an endpoint, you can't initialize this.\");\n        }\n        var currentOptions = mergeOptions(global_options, categoryOptions);\n        currentOptions.on_request = endpoint.on_request || currentOptions.on_request;\n        currentOptions.on_success = endpoint.on_success || currentOptions.on_success;\n        currentOptions.on_error = endpoint.on_error || currentOptions.on_error;\n        var url = `${currentOptions.base}${endpoint.path}`;\n        if ((params === null || params === void 0 ? void 0 : params['$sandbox']) || ((_a = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.values) === null || _a === void 0 ? void 0 : _a['$sandbox'])) {\n          url = `${currentOptions.sandboxBase || currentOptions.base}${endpoint.path}`;\n        }\n        var options = {\n          method: endpoint.method,\n          headers: Object.assign({}, currentOptions.headers),\n          agent: currentOptions.fetch_agent\n        };\n        var enctype = allowed_param_enctypes.includes(endpoint.enctype) ? endpoint.enctype : def_param_enctypes[endpoint.enctype || \"json\"];\n        var request_params = Object.assign({}, currentOptions.params, endpoint.params);\n        var bodySerializer = serializers[enctype](),\n          querySerializer = new URLSearchParams();\n        /**\r\n         * Parse Params\r\n         */\n        if (((_b = params === null || params === void 0 ? void 0 : params.constructor) === null || _b === void 0 ? void 0 : _b.name) == 'FormData') {\n          params = formToJson(params);\n        } else {\n          params = params || {};\n        }\n        for (var param_name in request_params) {\n          var param = request_params[param_name];\n          var current_param_value = params[param_name],\n            options_param_value = (_c = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.values) === null || _c === void 0 ? void 0 : _c[param_name],\n            default_param_value = param.default,\n            example_param_value = (params === null || params === void 0 ? void 0 : params['$sandbox']) || ((_d = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.values) === null || _d === void 0 ? void 0 : _d['$sandbox']) ? param.example : undefined;\n          var param_value = getOne(current_param_value, options_param_value, example_param_value, default_param_value);\n          var param_dest = param.name || param_name;\n          var param_error = param.help || `The '${param_name}' field is invalid.`;\n          //Required Param or not\n          if (param.required && isNull(param_value)) {\n            var error = new Error(param_error);\n            error.field = param_name;\n            throw error;\n          }\n          //Skip, not required\n          if (isNull(param_value)) continue;\n          //Formatter function?\n          if (typeof param.format === \"function\") {\n            try {\n              param_value = param.format(param_value);\n            } catch (e) {\n              var error = new Error(e.message || param_error);\n              error.field = param_name;\n              throw error;\n            }\n          }\n          //Type\n          if (param.type && param.type !== \"any\") {\n            var error = new Error(param_error);\n            error.field = param_name;\n            if ([\"string\", \"boolean\", \"number\"].includes(param.type) && typeof param_value != param.type || param.type == \"array\" && !Array.isArray(param_value) || param.type == \"object\" && (!param_value || param_value.__proto__.constructor.name !== \"Object\")) {\n              throw error;\n            }\n          }\n          //Validate\n          if (param.validate) {\n            if (((_f = (_e = param.validate) === null || _e === void 0 ? void 0 : _e.constructor) === null || _f === void 0 ? void 0 : _f.name) == \"RegExp\") {\n              param.validate['toJSON'] = function () {\n                return param.validate.toString().replace(/^\\//g, '').replace(/\\/$/g, '');\n              };\n            }\n            if (!new RegExp(param.validate).test(param_value)) {\n              var error = new Error(param_error);\n              error.field = param_name;\n              throw error;\n            }\n          }\n          //Max/Min\n          if (param.type == \"number\") {\n            if (param.hasOwnProperty('max') && !isNaN(param.max) && Number(param_value) > Number(param.max)) {\n              var error = new Error(`The maximum allowed value allowed for the ${param_dest} parameter is ${param.max}`);\n              error.field = param_name;\n              throw error;\n            }\n            if (param.hasOwnProperty('min') && !isNaN(param.min) && Number(param_value) < Number(param.min)) {\n              var error = new Error(`The minimum allowed value allowed for the ${param_dest} parameter is ${param.min}`);\n              error.field = param_name;\n              throw error;\n            }\n          }\n          //In\n          if (param.in && Array.isArray(param.in) && !param.in.includes(param_value)) {\n            var error = new Error(`The ${param_dest} parameter should be one of these values: ${param.in}`);\n            error.field = param_name;\n            throw error;\n          }\n          //Location\n          var param_location = typeof param.location === \"string\" ? param.location.toLowerCase() : def_param_locations[options.method];\n          if (!param_location || !allowed_param_locations.includes(param_location)) {\n            throw new Error(`Invalid location for '${param_name}' field.`);\n          }\n          if (param_location == \"headers\") {\n            options['headers'] = options['headers'] || {};\n            options['headers'][param_dest] = param_value;\n            continue;\n          }\n          if (param_location == \"body\") {\n            bodySerializer.append(param_dest, param_value);\n            continue;\n          }\n          if (param_location == \"query\") {\n            querySerializer.append(param_dest, param_value);\n            continue;\n          }\n          if (param_location == \"path\") {\n            url = url.replace(new RegExp(`\\{${escapeRegExp(param_dest).trim()}\\}`), param_value);\n          }\n        }\n        //Set Query\n        var hasQuery = querySerializer.toString();\n        if (hasQuery) {\n          url = `${url}?${hasQuery}`;\n        }\n        //Set Body\n        var isEmptyBody = bodySerializer.keys && isEmptyIterable(bodySerializer.keys()) || bodySerializer.getLengthSync && bodySerializer.getLengthSync() == 0 || bodySerializer.isEmpty && bodySerializer.isEmpty();\n        if (!isEmptyBody) {\n          options['body'] = bodySerializer.toString();\n        }\n        //Set content-type header, (not set for multipart/form-data because it overrides the automatically generated multipart key)\n        if (options['body'] && enctype !== 'multipart/form-data') {\n          options['headers'] = options['headers'] || {};\n          options['headers']['Content-Type'] = enctype;\n        }\n        let requestInfo = {\n          url: url,\n          options: options,\n          params: params,\n          key: categoryKey,\n          instance: global_options['__$root_instance__'],\n          self: wrap(endpoint, categoryOptions, categoryKey)\n        };\n        //Pre-Request Middleware\n        if (currentOptions.on_request) {\n          var requestCallbackRes = yield Promise.resolve(currentOptions.on_request(requestInfo));\n          if (requestCallbackRes) {\n            if ((requestCallbackRes === null || requestCallbackRes === void 0 ? void 0 : requestCallbackRes.url) || (requestCallbackRes === null || requestCallbackRes === void 0 ? void 0 : requestCallbackRes.options)) {\n              url = requestCallbackRes.url || url;\n              options = requestCallbackRes.options || options;\n            } else {\n              return requestCallbackRes;\n            }\n          }\n          if (requestCallbackRes === false) {\n            return false;\n          }\n        }\n        return sendRequest(url, options, currentOptions, requestInfo);\n      });\n    };\n    return sender;\n  }\n  /**\r\n   * Initalize a category and set values for it's endpoints. (Full category options can be updated with special $options key)\r\n   */\n  function newCategory(name, categoryOptions, categoryName, isRoot) {\n    name = name || \"Rests\";\n    var New = {\n      [name]: function (values) {\n        if (!(this instanceof New[name])) {\n          throw new Error(\"This is a category, you can initalize this category to update values using 'new' command.\");\n        }\n        if (isRoot) {\n          throw new Error(\"This is already initialized, you can use 'set' instead.\");\n        }\n        let currentOptions = mergeOptions(global_options, categoryOptions);\n        let updateOptions = parseSet(values);\n        let newOptions = mergeOptions(currentOptions, updateOptions);\n        return Rests(categoryName ? get(endpoints, categoryName) : endpoints, newOptions);\n      }\n    };\n    if (isRoot) {\n      /**\r\n       * Root object can update it's options\r\n       */\n      New[name]['set'] = function (values) {\n        if (this instanceof New[name]['set']) {\n          throw new Error(\"The set object can't be initialized.\");\n        }\n        let updateOptions = parseSet(values);\n        //Mutate Global Options\n        mergeOptions(global_options, updateOptions, true);\n        return New[name];\n      };\n    }\n    return New[name];\n  }\n  /**\r\n   * Recursive loop on schema and make wrappers\r\n   */\n  function traverse(root, schema, categoryOptions, categoryKey) {\n    for (var category in schema) {\n      var tree = schema[category];\n      if (!tree || typeof tree !== 'object') {\n        continue;\n      }\n      //Skip duplicate keys in main object root\n      if (typeof root[category] !== \"undefined\") {\n        console.warn(`Skipping ${category} as it confilicts with another key in the object`);\n        continue;\n      }\n      let categoryName = `${categoryKey ? categoryKey + '.' : ''}${category}`;\n      //Is Endpoint\n      if (tree.hasOwnProperty('path')) {\n        var endpoint = tree;\n        root[category] = wrap(endpoint, categoryOptions, categoryName);\n      }\n      //Is Category, recursion\n      else {\n        // Don't make category for special objects\n        if (category.substr(0, 1) === '$') {\n          continue;\n        }\n        let nextOptions = categoryOptions;\n        if (tree === null || tree === void 0 ? void 0 : tree['$options']) {\n          nextOptions = mergeOptions(categoryOptions, tree === null || tree === void 0 ? void 0 : tree['$options']);\n        }\n        root[category] = traverse(newCategory(category, nextOptions, categoryName), tree, nextOptions, categoryName);\n      }\n    }\n    return root;\n  }\n  const rootCategory = Object.defineProperty(newCategory(\"Rests\", global_options, undefined, true), '__schema__', {\n    value: {\n      schema: endpoints,\n      options: global_options\n    },\n    writable: false,\n    enumerable: false\n  });\n  global_options['__$root_instance__'] = rootCategory;\n  return traverse(rootCategory, endpoints, {});\n}\nRests.default = Rests;\nexports.default = Rests;\nmodule.exports = Rests;","map":{"version":3,"names":["require","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","Rests","endpoints","options","fetch","window","FormData","Error","copyOptions","o","assign","headers","params","values","parseSet","_a","_b","__proto__","constructor","name","saveOptions","$options","mergeOptions","prevOptions","currentOptions","mutate","firstOptions","secondOptions","global_options","base","on_error","on_success","on_request","fetch_agent","def_param_enctypes","allowed_param_enctypes","allowed_param_locations","def_param_locations","serializers","multipart/form-data","formData","toString","application/x-www-form-urlencoded","URLSearchParams","application/json","append","key","data","JSON","stringify","isEmpty","keys","length","text/plain","_","push","join","isNull","undefined","isEmptyIterable","iterable","escapeRegExp","string","replace","capitalize","substr","toUpperCase","formToJson","f","fromEntries","Array","from","k","endsWith","slice","getAll","get","t","path","split","reduce","r","getOne","args","i","sendRequest","url","requestInfo","res","contentType","corsType","type","err","formattedResponse","statusCode","status","statusText","ok","responseTypes","currentResponseType","find","responseType","RegExp","test","json","message","successCallbackRes","errorCallbackRes","wrap","endpoint","categoryOptions","categoryKey","method","sender","_c","_d","_e","_f","sandboxBase","agent","enctype","includes","request_params","bodySerializer","querySerializer","param_name","param","current_param_value","options_param_value","default_param_value","default","example_param_value","example","param_value","param_dest","param_error","help","required","error","field","format","isArray","validate","hasOwnProperty","isNaN","max","Number","min","in","param_location","location","toLowerCase","trim","hasQuery","isEmptyBody","getLengthSync","instance","self","requestCallbackRes","newCategory","categoryName","isRoot","New","updateOptions","newOptions","traverse","root","schema","category","tree","console","warn","nextOptions","rootCategory","writable","enumerable","module"],"sources":["/home/homesasha/Python_Fullstack/CryptoExChange/node_modules/rests/lib/index.js"],"sourcesContent":["\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n;\r\nfunction Rests(endpoints, options) {\r\n    const fetch = (typeof window !== 'undefined') ? window === null || window === void 0 ? void 0 : window.fetch : require(\"node-fetch\"), FormData = (typeof window !== 'undefined') ? window === null || window === void 0 ? void 0 : window.FormData : require(\"form-data\");\r\n    if (!fetch) {\r\n        throw new Error(\"Fetch API is not installed. If you are using Node please run `npm install node-fetch`\");\r\n    }\r\n    if (!FormData) {\r\n        throw new Error(\"FormData is not installed. If you are using Node please run `npm install form-data`\");\r\n    }\r\n    const copyOptions = (o) => (Object.assign(Object.assign({}, o), { headers: Object.assign({}, o.headers), params: Object.assign({}, o.params), values: Object.assign({}, o.values) }));\r\n    const parseSet = (values) => {\r\n        var _a, _b;\r\n        if (((_b = (_a = values === null || values === void 0 ? void 0 : values.__proto__) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name) != \"Object\") {\r\n            throw new Error(\"Invalid $options object.\");\r\n        }\r\n        let saveOptions = copyOptions(values.$options || {});\r\n        delete values['$options'];\r\n        return Object.assign(Object.assign({}, saveOptions), { values: Object.assign(Object.assign({}, saveOptions.values), values) });\r\n    };\r\n    const mergeOptions = (prevOptions, currentOptions, mutate = false //Mutate the previous options?\r\n    ) => {\r\n        let firstOptions = mutate ? prevOptions || {} : copyOptions(prevOptions || {});\r\n        let secondOptions = copyOptions(currentOptions || {});\r\n        secondOptions.headers = Object.assign(Object.assign({}, firstOptions.headers), secondOptions.headers);\r\n        secondOptions.params = Object.assign(Object.assign({}, firstOptions.params), secondOptions.params);\r\n        secondOptions.values = Object.assign(Object.assign({}, firstOptions.values), secondOptions.values);\r\n        Object.assign(firstOptions, secondOptions);\r\n        return firstOptions;\r\n    };\r\n    endpoints = Object.assign({}, endpoints);\r\n    let global_options = {\r\n        base: \"\",\r\n        headers: {\r\n            'User-Agent': 'Rests JS (v1.1.1)'\r\n        },\r\n        params: {},\r\n        values: {},\r\n        on_error: void 0,\r\n        on_success: void 0,\r\n        on_request: void 0,\r\n        fetch_agent: null,\r\n    };\r\n    mergeOptions(global_options, ((endpoints === null || endpoints === void 0 ? void 0 : endpoints.$options) || {}), true);\r\n    mergeOptions(global_options, options, true);\r\n    const def_param_enctypes = {\r\n        \"json\": \"application/json\",\r\n        \"form\": \"multipart/form-data\",\r\n        \"urlencoded\": \"application/x-www-form-urlencoded\",\r\n        \"text\": \"text/plain\"\r\n    }, allowed_param_enctypes = Object.values(def_param_enctypes), allowed_param_locations = [\"headers\", \"body\", \"query\", \"path\"], def_param_locations = {\r\n        'POST': 'body',\r\n        'GET': 'query',\r\n    };\r\n    const serializers = {\r\n        'multipart/form-data': (function () {\r\n            var formData = new FormData();\r\n            formData.toString = function () { return this; };\r\n            return formData;\r\n        }),\r\n        'application/x-www-form-urlencoded': (function () { return new URLSearchParams(); }),\r\n        'application/json': (function () {\r\n            return {\r\n                append: function (key, value) { this.data = this.data || {}; this.data[key] = value; },\r\n                toString: function () { return JSON.stringify(this.data); },\r\n                isEmpty: function () {\r\n                    return (!this.data || Object.keys(this.data).length == 0);\r\n                }\r\n            };\r\n        }),\r\n        'text/plain': (function () {\r\n            return {\r\n                append: function (_, value) { this.data = this.data || []; return this.data.push(value); },\r\n                toString: function () { return this.data.join(''); },\r\n                isEmpty: function () {\r\n                    return (!this.data || this.data.length == 0);\r\n                }\r\n            };\r\n        })\r\n    };\r\n    const isNull = (value) => {\r\n        return value === null || value === undefined;\r\n    };\r\n    const isEmptyIterable = (iterable) => {\r\n        for (var _ of iterable) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    const escapeRegExp = (string) => {\r\n        return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n    };\r\n    const capitalize = (string) => {\r\n        return string.substr(0, 1).toUpperCase() + string.substr(1, string.length);\r\n    };\r\n    const formToJson = (f) => {\r\n        return Object.fromEntries(Array.from(f.keys(), (k) => (k.endsWith('[]') ? [k.slice(0, -2), f.getAll(k)] : [k, f.get(k)])));\r\n    };\r\n    const get = (t, path) => (path.split(\".\").reduce((r, k) => r === null || r === void 0 ? void 0 : r[k], t));\r\n    const getOne = (...args) => {\r\n        for (var i = 0; i < args.length; i++) {\r\n            if (args[i] !== null && args[i] !== undefined) {\r\n                return args[i];\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Fetch API\r\n     */\r\n    const sendRequest = (url, options, currentOptions, requestInfo) => __awaiter(this, void 0, void 0, function* () {\r\n        return fetch(url, options)\r\n            .then(function (res) {\r\n            var _a;\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                try {\r\n                    var contentType = res.headers.get('Content-Type') || '';\r\n                    let corsType;\r\n                    try {\r\n                        corsType = res.type;\r\n                    }\r\n                    catch (err) {\r\n                        //prevent errors on cloudflare workers \r\n                    }\r\n                    let formattedResponse = {\r\n                        statusCode: res.status,\r\n                        statusText: res.statusText,\r\n                        headers: res.headers,\r\n                        type: corsType,\r\n                        ok: res.ok\r\n                    };\r\n                    let responseTypes = {\r\n                        'application\\/json': 'json',\r\n                        'text\\/plain': 'text',\r\n                        '(multipart\\/form\\-data|application\\/x\\-www\\-form\\-urlencoded)': 'formData',\r\n                        'blob': 'blob',\r\n                        'text': 'text'\r\n                    };\r\n                    let currentResponseType = Object.keys(responseTypes).find((responseType) => (new RegExp(responseType)).test(contentType)) || \"text\";\r\n                    formattedResponse[responseTypes[currentResponseType]] = yield res[responseTypes[currentResponseType]]();\r\n                    formattedResponse['message'] = ((_a = formattedResponse === null || formattedResponse === void 0 ? void 0 : formattedResponse.json) === null || _a === void 0 ? void 0 : _a.message) || (res.ok ? \"Success.\" : \"Something went wrong.\");\r\n                    if (!res.ok) {\r\n                        throw formattedResponse;\r\n                    }\r\n                    if (currentOptions.on_success) {\r\n                        let successCallbackRes = currentOptions.on_success(formattedResponse, requestInfo);\r\n                        if (successCallbackRes !== undefined) {\r\n                            return successCallbackRes;\r\n                        }\r\n                    }\r\n                    return formattedResponse;\r\n                }\r\n                catch (err) {\r\n                    if (currentOptions.on_error) {\r\n                        let errorCallbackRes = currentOptions.on_error(err, requestInfo);\r\n                        if (errorCallbackRes !== undefined) {\r\n                            return errorCallbackRes;\r\n                        }\r\n                    }\r\n                    return Promise.reject(err);\r\n                }\r\n            });\r\n        });\r\n    });\r\n    /**\r\n     * Request Wrapper\r\n     */\r\n    function wrap(endpoint, categoryOptions, categoryKey) {\r\n        endpoint.method = (endpoint.method || \"get\").toUpperCase(),\r\n            endpoint.params = endpoint.params || {};\r\n        const sender = function (params) {\r\n            var _a, _b, _c, _d, _e, _f;\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                if (this instanceof sender) {\r\n                    throw new Error(\"This is an endpoint, you can't initialize this.\");\r\n                }\r\n                var currentOptions = mergeOptions(global_options, categoryOptions);\r\n                currentOptions.on_request = endpoint.on_request || currentOptions.on_request;\r\n                currentOptions.on_success = endpoint.on_success || currentOptions.on_success;\r\n                currentOptions.on_error = endpoint.on_error || currentOptions.on_error;\r\n                var url = `${currentOptions.base}${endpoint.path}`;\r\n                if ((params === null || params === void 0 ? void 0 : params['$sandbox']) || ((_a = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.values) === null || _a === void 0 ? void 0 : _a['$sandbox'])) {\r\n                    url = `${currentOptions.sandboxBase || currentOptions.base}${endpoint.path}`;\r\n                }\r\n                var options = {\r\n                    method: endpoint.method,\r\n                    headers: Object.assign({}, currentOptions.headers),\r\n                    agent: currentOptions.fetch_agent\r\n                };\r\n                var enctype = allowed_param_enctypes.includes(endpoint.enctype) ? endpoint.enctype : def_param_enctypes[endpoint.enctype || \"json\"];\r\n                var request_params = Object.assign({}, currentOptions.params, endpoint.params);\r\n                var bodySerializer = serializers[enctype](), querySerializer = new URLSearchParams();\r\n                /**\r\n                 * Parse Params\r\n                 */\r\n                if (((_b = params === null || params === void 0 ? void 0 : params.constructor) === null || _b === void 0 ? void 0 : _b.name) == 'FormData') {\r\n                    params = formToJson(params);\r\n                }\r\n                else {\r\n                    params = params || {};\r\n                }\r\n                for (var param_name in request_params) {\r\n                    var param = request_params[param_name];\r\n                    var current_param_value = params[param_name], options_param_value = (_c = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.values) === null || _c === void 0 ? void 0 : _c[param_name], default_param_value = param.default, example_param_value = ((params === null || params === void 0 ? void 0 : params['$sandbox']) || ((_d = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.values) === null || _d === void 0 ? void 0 : _d['$sandbox'])) ? param.example : undefined;\r\n                    var param_value = getOne(current_param_value, options_param_value, example_param_value, default_param_value);\r\n                    var param_dest = param.name || param_name;\r\n                    var param_error = param.help || `The '${param_name}' field is invalid.`;\r\n                    //Required Param or not\r\n                    if (param.required && isNull(param_value)) {\r\n                        var error = new Error(param_error);\r\n                        error.field = param_name;\r\n                        throw error;\r\n                    }\r\n                    //Skip, not required\r\n                    if (isNull(param_value))\r\n                        continue;\r\n                    //Formatter function?\r\n                    if (typeof param.format === \"function\") {\r\n                        try {\r\n                            param_value = param.format(param_value);\r\n                        }\r\n                        catch (e) {\r\n                            var error = new Error(e.message || param_error);\r\n                            error.field = param_name;\r\n                            throw error;\r\n                        }\r\n                    }\r\n                    //Type\r\n                    if (param.type && param.type !== \"any\") {\r\n                        var error = new Error(param_error);\r\n                        error.field = param_name;\r\n                        if (([\"string\", \"boolean\", \"number\"].includes(param.type) && typeof param_value != param.type) ||\r\n                            (param.type == \"array\" && !Array.isArray(param_value)) ||\r\n                            (param.type == \"object\" && (!param_value || param_value.__proto__.constructor.name !== \"Object\"))) {\r\n                            throw error;\r\n                        }\r\n                    }\r\n                    //Validate\r\n                    if (param.validate) {\r\n                        if (((_f = (_e = param.validate) === null || _e === void 0 ? void 0 : _e.constructor) === null || _f === void 0 ? void 0 : _f.name) == \"RegExp\") {\r\n                            param.validate['toJSON'] = function () {\r\n                                return param.validate.toString().replace(/^\\//g, '').replace(/\\/$/g, '');\r\n                            };\r\n                        }\r\n                        if (!(new RegExp(param.validate).test(param_value))) {\r\n                            var error = new Error(param_error);\r\n                            error.field = param_name;\r\n                            throw error;\r\n                        }\r\n                    }\r\n                    //Max/Min\r\n                    if (param.type == \"number\") {\r\n                        if (param.hasOwnProperty('max') && !isNaN(param.max) && Number(param_value) > Number(param.max)) {\r\n                            var error = new Error(`The maximum allowed value allowed for the ${param_dest} parameter is ${param.max}`);\r\n                            error.field = param_name;\r\n                            throw error;\r\n                        }\r\n                        if (param.hasOwnProperty('min') && !isNaN(param.min) && Number(param_value) < Number(param.min)) {\r\n                            var error = new Error(`The minimum allowed value allowed for the ${param_dest} parameter is ${param.min}`);\r\n                            error.field = param_name;\r\n                            throw error;\r\n                        }\r\n                    }\r\n                    //In\r\n                    if (param.in && Array.isArray(param.in) && !param.in.includes(param_value)) {\r\n                        var error = new Error(`The ${param_dest} parameter should be one of these values: ${param.in}`);\r\n                        error.field = param_name;\r\n                        throw error;\r\n                    }\r\n                    //Location\r\n                    var param_location = (typeof param.location === \"string\" ? param.location.toLowerCase() : def_param_locations[options.method]);\r\n                    if (!param_location || !allowed_param_locations.includes(param_location)) {\r\n                        throw new Error(`Invalid location for '${param_name}' field.`);\r\n                    }\r\n                    if (param_location == \"headers\") {\r\n                        options['headers'] = options['headers'] || {};\r\n                        options['headers'][param_dest] = param_value;\r\n                        continue;\r\n                    }\r\n                    if (param_location == \"body\") {\r\n                        bodySerializer.append(param_dest, param_value);\r\n                        continue;\r\n                    }\r\n                    if (param_location == \"query\") {\r\n                        querySerializer.append(param_dest, param_value);\r\n                        continue;\r\n                    }\r\n                    if (param_location == \"path\") {\r\n                        url = url.replace(new RegExp(`\\{${escapeRegExp(param_dest).trim()}\\}`), param_value);\r\n                    }\r\n                }\r\n                //Set Query\r\n                var hasQuery = querySerializer.toString();\r\n                if (hasQuery) {\r\n                    url = `${url}?${hasQuery}`;\r\n                }\r\n                //Set Body\r\n                var isEmptyBody = (bodySerializer.keys && isEmptyIterable(bodySerializer.keys())) ||\r\n                    (bodySerializer.getLengthSync && bodySerializer.getLengthSync() == 0) ||\r\n                    (bodySerializer.isEmpty && bodySerializer.isEmpty());\r\n                if (!isEmptyBody) {\r\n                    options['body'] = bodySerializer.toString();\r\n                }\r\n                //Set content-type header, (not set for multipart/form-data because it overrides the automatically generated multipart key)\r\n                if (options['body'] && enctype !== 'multipart/form-data') {\r\n                    options['headers'] = options['headers'] || {};\r\n                    options['headers']['Content-Type'] = enctype;\r\n                }\r\n                let requestInfo = {\r\n                    url: url,\r\n                    options: options,\r\n                    params: params,\r\n                    key: categoryKey,\r\n                    instance: global_options['__$root_instance__'],\r\n                    self: wrap(endpoint, categoryOptions, categoryKey)\r\n                };\r\n                //Pre-Request Middleware\r\n                if (currentOptions.on_request) {\r\n                    var requestCallbackRes = yield Promise.resolve(currentOptions.on_request(requestInfo));\r\n                    if (requestCallbackRes) {\r\n                        if ((requestCallbackRes === null || requestCallbackRes === void 0 ? void 0 : requestCallbackRes.url) || (requestCallbackRes === null || requestCallbackRes === void 0 ? void 0 : requestCallbackRes.options)) {\r\n                            url = requestCallbackRes.url || url;\r\n                            options = requestCallbackRes.options || options;\r\n                        }\r\n                        else {\r\n                            return requestCallbackRes;\r\n                        }\r\n                    }\r\n                    if (requestCallbackRes === false) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return sendRequest(url, options, currentOptions, requestInfo);\r\n            });\r\n        };\r\n        return sender;\r\n    }\r\n    /**\r\n     * Initalize a category and set values for it's endpoints. (Full category options can be updated with special $options key)\r\n     */\r\n    function newCategory(name, categoryOptions, categoryName, isRoot) {\r\n        name = name || \"Rests\";\r\n        var New = {\r\n            [name]: (function (values) {\r\n                if (!(this instanceof New[name])) {\r\n                    throw new Error(\"This is a category, you can initalize this category to update values using 'new' command.\");\r\n                }\r\n                if (isRoot) {\r\n                    throw new Error(\"This is already initialized, you can use 'set' instead.\");\r\n                }\r\n                let currentOptions = mergeOptions(global_options, categoryOptions);\r\n                let updateOptions = parseSet(values);\r\n                let newOptions = mergeOptions(currentOptions, updateOptions);\r\n                return Rests(categoryName ? get(endpoints, categoryName) : endpoints, newOptions);\r\n            })\r\n        };\r\n        if (isRoot) {\r\n            /**\r\n             * Root object can update it's options\r\n             */\r\n            New[name]['set'] = function (values) {\r\n                if (this instanceof New[name]['set']) {\r\n                    throw new Error(\"The set object can't be initialized.\");\r\n                }\r\n                let updateOptions = parseSet(values);\r\n                //Mutate Global Options\r\n                mergeOptions(global_options, updateOptions, true);\r\n                return New[name];\r\n            };\r\n        }\r\n        return New[name];\r\n    }\r\n    /**\r\n     * Recursive loop on schema and make wrappers\r\n     */\r\n    function traverse(root, schema, categoryOptions, categoryKey) {\r\n        for (var category in schema) {\r\n            var tree = schema[category];\r\n            if (!tree || typeof tree !== 'object') {\r\n                continue;\r\n            }\r\n            //Skip duplicate keys in main object root\r\n            if (typeof root[category] !== \"undefined\") {\r\n                console.warn(`Skipping ${category} as it confilicts with another key in the object`);\r\n                continue;\r\n            }\r\n            let categoryName = `${categoryKey ? categoryKey + '.' : ''}${category}`;\r\n            //Is Endpoint\r\n            if (tree.hasOwnProperty('path')) {\r\n                var endpoint = tree;\r\n                root[category] = wrap(endpoint, categoryOptions, categoryName);\r\n            }\r\n            //Is Category, recursion\r\n            else {\r\n                // Don't make category for special objects\r\n                if (category.substr(0, 1) === '$') {\r\n                    continue;\r\n                }\r\n                let nextOptions = categoryOptions;\r\n                if (tree === null || tree === void 0 ? void 0 : tree['$options']) {\r\n                    nextOptions = mergeOptions(categoryOptions, tree === null || tree === void 0 ? void 0 : tree['$options']);\r\n                }\r\n                root[category] = traverse(newCategory(category, nextOptions, categoryName), tree, nextOptions, categoryName);\r\n            }\r\n        }\r\n        return root;\r\n    }\r\n    const rootCategory = Object.defineProperty(newCategory(\"Rests\", global_options, undefined, true), '__schema__', {\r\n        value: {\r\n            schema: endpoints,\r\n            options: global_options\r\n        },\r\n        writable: false,\r\n        enumerable: false\r\n    });\r\n    global_options['__$root_instance__'] = rootCategory;\r\n    return traverse(rootCategory, endpoints, {});\r\n}\r\nRests.default = Rests;\r\nexports.default = Rests;\r\nmodule.exports = Rests;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}